// Generated by CoffeeScript 1.10.0
(function() {
  var Connection, FileConnection, fs,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  fs = require("fs");

  Connection = require('../Connection');

  FileConnection = (function(superClass) {
    extend(FileConnection, superClass);

    function FileConnection() {
      return FileConnection.__super__.constructor.apply(this, arguments);
    }

    FileConnection.prototype.connect = function(callback) {
      if (!this.settings.path) {
        return callback(new Error("settings.path must be specified"));
      } else {
        return callback();
      }
    };

    FileConnection.prototype.close = function(callback) {
      return callback();
    };

    FileConnection.prototype.saveStream = function(stream, id, callback) {
      var err, error, writeStream;
      writeStream = void 0;
      try {
        writeStream = fs.createWriteStream(this.getPath(id));
      } catch (error) {
        err = error;
        callback(err);
      }
      stream.on("end", function() {
        return callback(null, {
          id: id
        });
      });
      stream.on("error", function(err) {
        return callback(err);
      });
      stream.pipe(writeStream);
    };

    FileConnection.prototype.getStream = function(id, callback) {
      var path;
      path = this.getPath(id);
      return fs.exists(path, (function(_this) {
        return function(exists) {
          if (!exists) {
            return callback(new Error('record ' + id + ' doesn\'t exists'));
          }
          return callback(null, fs.createReadStream(path));
        };
      })(this));
    };

    FileConnection.prototype.remove = function(id, callback) {
      fs.unlink(this.getPath(id), callback);
    };

    return FileConnection;

  })(Connection);

  module.exports = FileConnection;

}).call(this);

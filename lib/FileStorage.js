// Generated by CoffeeScript 1.10.0
(function() {
  var FileManager, GenericPool, PassThrough, Q, convert, md5, queryString, streamToBuffer, streamifier, url, uuid;

  url = require('url');

  queryString = require('query-string');

  md5 = require('md5');

  Q = require('q');

  GenericPool = require('generic-pool');

  uuid = require('uuid');

  convert = require('unit-converter');

  PassThrough = require('stream').PassThrough;

  streamifier = require('streamifier');

  streamToBuffer = require('stream-to-buffer');

  FileManager = (function() {
    function FileManager(settings) {
      var key, query, ref, ref1, value;
      this.settings = settings;
      if (typeof this.settings === 'string') {
        this.settings = url.parse(this.settings);
      }
      if (this.settings.auth) {
        ref = this.settings.auth.split(':'), this.settings.user = ref[0], this.settings.password = ref[1];
        this.settings.username = this.settings.user;
      }
      if (this.settings.query) {
        query = queryString.parse(this.settings.query);
        for (key in query) {
          value = query[key];
          this.settings[key] = value;
        }
      }
      this.type = (ref1 = this.settings.protocol) != null ? ref1.replace(':', '') : void 0;
      this.pool = GenericPool.Pool({
        name: this.type,
        create: (function(_this) {
          return function(callback) {
            var Connection, connection;
            Connection = require(__dirname + "/connections/" + _this.type + ".js");
            connection = new Connection(_this.settings);
            return connection.connect(function(err) {
              if (err) {
                callback(err);
              }
              return callback(null, connection);
            });
          };
        })(this),
        destroy: (function(_this) {
          return function(connection) {
            return connection.close(function() {});
          };
        })(this),
        max: this.settings.maxConnections || 10,
        idleTimeoutMillis: convert(this.settings.ttl || '60s').to('s')
      });
    }

    FileManager.prototype.saveStream = function(stream, id, callback) {
      var deferred;
      deferred = Q.defer();
      if (typeof id === 'function') {
        callback = id;
        id = this.getNewId();
      }
      id = String(id);
      this.pool.acquire((function(_this) {
        return function(err, connection) {
          var passThrough;
          if (err) {
            return deferred.reject(err);
          }
          passThrough = new PassThrough();
          stream.pipe(passThrough);
          return connection.saveStream(passThrough, id, function(err, info) {
            _this.pool.release(connection);
            if (err) {
              return deferred.reject(err);
            }
            info.id = id;
            return deferred.resolve(info);
          });
        };
      })(this));
      return deferred.promise.nodeify(callback);
    };

    FileManager.prototype.saveData = function(data, id, callback) {
      var deferred;
      deferred = Q.defer();
      if (typeof id === 'function') {
        callback = id;
        id = this.getNewId();
      }
      id = String(id);
      this.pool.acquire((function(_this) {
        return function(err, connection) {
          if (err) {
            return deferred.reject(err);
          }
          return connection.saveData(data, id, function(err, info) {
            _this.pool.release(connection);
            if (err) {
              return deferred.reject(err);
            }
            info.id = id;
            return deferred.resolve(info);
          });
        };
      })(this));
      return deferred.promise.nodeify(callback);
    };

    FileManager.prototype.getStream = function(id, callback) {
      var deferred;
      deferred = Q.defer();
      this.pool.acquire((function(_this) {
        return function(err, connection) {
          if (err) {
            return deferred.reject(err);
          }
          return connection.getStream(id, function(err, stream) {
            var releaseCallback, released;
            if (err) {
              return deferred.reject(err);
            }
            deferred.resolve(stream);
            released = false;
            releaseCallback = function() {
              if (!released) {
                _this.pool.release(connection);
              }
              return released = true;
            };
            stream.on('error', releaseCallback);
            stream.on('finish', releaseCallback);
            stream.on('end', releaseCallback);
            return stream.on('close', releaseCallback);
          });
        };
      })(this));
      return deferred.promise.nodeify(callback);
    };

    FileManager.prototype.getData = function(id, callback) {
      var deferred;
      deferred = Q.defer();
      this.pool.acquire((function(_this) {
        return function(err, connection) {
          if (err) {
            return deferred.reject(err);
          }
          return connection.getData(id, function(err, data) {
            _this.pool.release(connection);
            if (err) {
              return deferred.reject(err);
            }
            return deferred.resolve(data);
          });
        };
      })(this));
      return deferred.promise.nodeify(callback);
    };

    FileManager.prototype.getNewId = function() {
      return uuid.v4();
    };

    FileManager.prototype.remove = function(id, callback) {
      var deferred;
      deferred = Q.defer();
      this.pool.acquire((function(_this) {
        return function(err, connection) {
          return connection.remove(String(id), function(err) {
            _this.pool.release(connection);
            if (err) {
              return deferred.reject(err);
            }
            return deferred.resolve();
          });
        };
      })(this));
      return deferred.promise.nodeify(callback);
    };

    return FileManager;

  })();

  module.exports = FileManager;

}).call(this);

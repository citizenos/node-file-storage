// Generated by CoffeeScript 1.10.0
(function() {
  var Connection, S3Connection, aws, fs, mime,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  aws = require('aws-sdk');

  fs = require('fs');

  mime = require('mime-types');

  Connection = require('../Connection');

  S3Connection = (function(superClass) {
    extend(S3Connection, superClass);

    function S3Connection() {
      return S3Connection.__super__.constructor.apply(this, arguments);
    }

    S3Connection.prototype.connect = function(callback) {
      this.client = new aws.S3({
        accessKeyId: this._getKeyId(),
        secretAccessKey: this._getSecretKey(),
        signatureVersion: this._getSignatureVersion(),
        region: this._getRegion()
      });
      return callback();
    };

    S3Connection.prototype.close = function(callback) {
      return callback();
    };

    S3Connection.prototype.saveStream = function(stream, id, callback) {
      var upload;
      upload = new aws.S3.ManagedUpload({
        service: this.client,
        params: {
          Bucket: this._bucketName(),
          Key: this.getPath(id),
          Body: stream,
          ContentType: mime.lookup(id) || 'application/octet-stream'
        }
      });
      return upload.send(function(err, info) {
        if (info) {
          info.id = id;
        }
        return callback(err, info);
      });
    };

    S3Connection.prototype.getStream = function(id, callback) {
      var stream;
      stream = this.client.getObject({
        Bucket: this._bucketName(),
        Key: this.getPath(id)
      }).createReadStream();
      stream.on('error', callback);
      return stream.once('readable', function() {
        return callback(null, stream);
      });
    };

    S3Connection.prototype.remove = function(id, callback) {
      return this.client.deleteObject({
        Key: this.getPath(id),
        Bucket: this._bucketName()
      }, callback);
    };

    S3Connection.prototype._partSize = function() {
      return this.settings.partSize || 1 * 1024 * 1024;
    };

    S3Connection.prototype._queueSize = function() {
      return this.settings.queueSize || 5;
    };

    S3Connection.prototype._getRegion = function() {
      return this.settings.region;
    };

    S3Connection.prototype._getSignatureVersion = function() {
      return this.settings.signatureVersion || 'v4';
    };

    S3Connection.prototype._bucketName = function() {
      return this.settings.host || this.settings.bucket;
    };

    S3Connection.prototype._getKeyId = function() {
      return this.settings.user || this.settings.accessKeyId;
    };

    S3Connection.prototype._getSecretKey = function() {
      return this.settings.password || this.settings.secretAccessKey;
    };

    return S3Connection;

  })(Connection);

  module.exports = S3Connection;

}).call(this);
